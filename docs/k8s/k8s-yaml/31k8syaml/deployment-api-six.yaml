apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubia-api-six
  namespace: huanghuanghui
spec:
  minReadySeconds: 3
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0 
  selector:
    matchLabels:
      app: kubia-api-six
  template:
    metadata:
      labels:
        app: kubia-api-six
    spec:
      containers:
      - name: kubia
        image: huanghuanghui/kubia
        readinessProbe:
          periodSeconds: 10
          httpGet: 
            path: /
            port: 8080
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: kubia-api-six
  namespace: huanghuanghui
spec:
  type: NodePort
  selector:
    app: kubia-api-six
  ports:
      # 默认情况下，为了方便起见，`targetPort` 被设置为与 `port` 字段相同的值。
      # 我们访问服务的端口
    - port: 80
      # 我们容器服务端口，与dockerFile暴露端口一致
      targetPort: 8080
      # 可选字段
      # 默认情况下，为了方便起见，Kubernetes 控制平面会从某个范围内分配一个端口号（默认：30000-32767）
      nodePort: 30099



---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubia-api-six
  namespace: huanghuanghui
spec:
  ingressClassName: apisix
  rules:
  - host: kubiaapisix.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kubia-api-six
            port:
              number: 80